/* CSSGrid
 * https://github.com/crowdfavorite/css-grid
 * Version: 2.0.3
 * License: http://opensource.org/licenses/mit-license.php  */

/** Variables
 --------------------------------------------------
 To provide your own values for the variables below, simply re-define them in your Sass prior
 to importing this partial. You can only customize variables that include the !default flag.
 -------------------------------------------------- */
$cg-use-lg-breakpoint: false !default;
$cg-use-border-box: false !default;
$cg-default-size-prefix: 'sm' !default; // formerly md

// Large (large desktop) in px
$cg-lg-grid-inner-width: 1420px !default;
$cg-lg-grid-gutter: 0px !default;
$cg-lg-col-margins: 20px !default;

// Medium (tablet/desktop) in px
$cg-md-grid-inner-width: 1048px !default;
$cg-md-grid-gutter: 0px !default;
$cg-md-col-margins: 20px !default;

// Small (mobile) in px
$cg-sm-grid-inner-width: 760px !default;
$cg-sm-grid-gutter: 0px !default;
$cg-sm-col-margins: 20px !default;

// Smallest (block) in px
$cg-xs-grid-gutter: 10px !default;

// Grid total widths (not overridable)
$cg-lg-grid-total-width: $cg-lg-grid-inner-width + (2 * $cg-lg-grid-gutter);
$cg-md-grid-total-width: $cg-md-grid-inner-width + (2 * $cg-md-grid-gutter);
$cg-sm-grid-total-width: $cg-sm-grid-inner-width + (2 * $cg-sm-grid-gutter);

// Break Points
$cg-lg-bp-min-width: $cg-lg-grid-total-width;
$cg-md-bp-max-width: $cg-lg-grid-total-width - 1 !default;
$cg-md-bp-min-width: $cg-md-grid-total-width !default;
$cg-sm-bp-max-width: $cg-md-grid-total-width - 1 !default;
$cg-sm-bp-min-width: $cg-sm-grid-total-width !default;
$cg-xs-bp-max-width: $cg-sm-grid-total-width - 1 !default;

// Media queries
$cg-lg-mq: '(min-width: #{$cg-lg-bp-min-width})' !default; // formerly "desktop-mq"
$cg-md-mq: if($cg-use-lg-breakpoint, '(min-width: #{$cg-md-bp-min-width}) and (max-width: #{$cg-md-bp-max-width})', '(min-width: #{$cg-md-bp-min-width})') !default; // formerly "tablet-mq"
$cg-sm-mq: '(min-width: #{$cg-sm-bp-min-width}) and (max-width: #{$cg-sm-bp-max-width})' !default; // formerly "phone-mq"
$cg-xs-mq: '(max-width: #{$cg-xs-bp-max-width})' !default;

// Column count (not overridable)
$cg-column-count: 12;

// Column widths (not overridable)
// If we're using box-sizing:border-box, then we need to manually add the padding (gutters) to the inner-width
// value to get an accurate column width.
$cg-lg-column-width: (($cg-lg-grid-inner-width - (($cg-lg-col-margins * ($cg-column-count - 1)))) / $cg-column-count);
$cg-md-column-width: (($cg-md-grid-inner-width - (($cg-md-col-margins * ($cg-column-count - 1)))) / $cg-column-count);
$cg-sm-column-width: (($cg-sm-grid-inner-width - (($cg-sm-col-margins * ($cg-column-count - 1)))) / $cg-column-count);
@if $cg-use-border-box {
	$cg-lg-column-width: ((($cg-lg-grid-inner-width + ($cg-lg-grid-gutter * 2)) - (($cg-lg-col-margins * ($cg-column-count - 1)))) / $cg-column-count) !global;
	$cg-md-column-width: ((($cg-md-grid-inner-width + ($cg-md-grid-gutter * 2)) - (($cg-md-col-margins * ($cg-column-count - 1)))) / $cg-column-count) !global;
	$cg-sm-column-width: ((($cg-sm-grid-inner-width + ($cg-sm-grid-gutter * 2)) - (($cg-sm-col-margins * ($cg-column-count - 1)))) / $cg-column-count) !global;
}

/** move vars to a map for dynamic usage
 -------------------------------------------------- */
$_cg-size-map: (
	xs: (
		grid-gutter: $cg-xs-grid-gutter,
		mq: $cg-xs-mq
	),
	sm: (
		grid-inner-width: $cg-sm-grid-inner-width,
		grid-gutter: $cg-sm-grid-gutter,
		col-margins: $cg-sm-col-margins,
		grid-total-width: $cg-sm-grid-total-width,
		bp-max-width: $cg-sm-bp-max-width,
		bp-min-width: $cg-sm-bp-min-width,
		column-width: $cg-sm-column-width,
		mq: $cg-sm-mq
	),
	md: (
		grid-inner-width: $cg-md-grid-inner-width,
		grid-gutter: $cg-md-grid-gutter,
		col-margins: $cg-md-col-margins,
		grid-total-width: $cg-md-grid-total-width,
		bp-max-width: $cg-md-bp-max-width,
		bp-min-width: $cg-md-bp-min-width,
		column-width: $cg-md-column-width,
		mq: $cg-md-mq
	),
	lg: (
		grid-inner-width: $cg-lg-grid-inner-width,
		grid-gutter: $cg-lg-grid-gutter,
		col-margins: $cg-lg-col-margins,
		grid-total-width: $cg-lg-grid-total-width,
		bp-min-width: $cg-lg-bp-min-width,
		column-width: $cg-lg-column-width,
		mq: $cg-lg-mq
	)
);

$_cg-default-size-map: map-get($_cg-size-map, $cg-default-size-prefix);

/** grid foundation
 -------------------------------------------------- */
.grid {
	margin: 0 auto;
}

/* fluid media */
.row img,
.row object,
.row embed,
.row video {
	max-width: 100%;
}

/** mixins
 -------------------------------------------------- */

/**
 * Prints a width definition to be used by .grid.
 */
@mixin cg-grid-width-for-size($size-prefix) {
	$_map: map-get($_cg-size-map, $size-prefix);
	$_width: if($cg-use-border-box, map-get($_map, grid-total-width), map-get($_map, grid-inner-width));
	width: $_width;
}

@mixin cg-gutters($gutter) {
	padding-left: $gutter;
	padding-right: $gutter;
}

@mixin cg-cols-width($col-width, $margin-width, $multiplier: 1) {
	width: (($col-width * $multiplier) + (($multiplier - 1) * $margin-width));
}

@mixin cg-offset($col-width, $margin-width, $multiplier: 1, $first: false) {
	@if $first {
		margin-left: (($col-width * $multiplier) + ($multiplier * $margin-width));
	}
	@else {
		margin-left: (($col-width * $multiplier) + ($multiplier * $margin-width) + $margin-width);
	}
}

@mixin cg-row($margin) {
	margin-left: -$margin;
}

/**
 * Generates the grid CSS for a given size prefix.
 *
 * This should be called within the media query associated with the size prefix.
 */
@mixin _cg-generate-for-size($size-prefix) {
	$_map: map-get($_cg-size-map, $size-prefix);

	@if($size-prefix == 'xs') {
		// --- The "xs" size is special and has unique output.
		.grid {
			@include cg-gutters(map-get($_map, grid-gutter));
			width: auto;
		}
		.grid,
		.c1,.c2,.c3,.c4,.c5,.c6,.c7,.c8,.c9,.c10,.c11,.c12,
		.c1-2,.c2-3,.c3-4,.c4-5,.c5-6,.c6-7,.c7-8,.c8-9,.c9-10,.c10-11,.c11-12,
		.c1-3,.c2-4,.c3-5,.c4-6,.c5-7,.c6-8,.c7-9,.c8-10,.c9-11,.c10-12,
		.c1-4,.c2-5,.c3-6,.c4-7,.c5-8,.c6-9,.c7-10,.c8-11,.c9-12,
		.c1-5,.c2-6,.c3-7,.c4-8,.c5-9,.c6-10,.c7-11,.c8-12,
		.c1-6,.c2-7,.c3-8,.c4-9,.c5-10,.c6-11,.c7-12,
		.c1-7,.c2-8,.c3-9,.c4-10,.c5-11,.c6-12,
		.c1-8,.c2-9,.c3-10,.c4-11,.c5-12,
		.c1-9,.c2-10,.c3-11,.c4-12,
		.c1-10,.c2-11,.c3-12,
		.c1-11,.c2-12,
		.c1-12	{
			display: block;
			float: none;
			margin-left: 0;
			width: auto;
		}
		.row {
			margin-left: 0;
		}
		// --- (end 'xs' generation)

	} @else {
		// --- The rest of the sizes use the routine below.
		.grid {
			@include cg-gutters(map-get($_map, grid-gutter));
			@include cg-grid-width-for-size($size-prefix);
		}
		.c1,.c2,.c3,.c4,.c5,.c6,.c7,.c8,.c9,.c10,.c11,.c12,
		.c1-2,.c2-3,.c3-4,.c4-5,.c5-6,.c6-7,.c7-8,.c8-9,.c9-10,.c10-11,.c11-12,
		.c1-3,.c2-4,.c3-5,.c4-6,.c5-7,.c6-8,.c7-9,.c8-10,.c9-11,.c10-12,
		.c1-4,.c2-5,.c3-6,.c4-7,.c5-8,.c6-9,.c7-10,.c8-11,.c9-12,
		.c1-5,.c2-6,.c3-7,.c4-8,.c5-9,.c6-10,.c7-11,.c8-12,
		.c1-6,.c2-7,.c3-8,.c4-9,.c5-10,.c6-11,.c7-12,
		.c1-7,.c2-8,.c3-9,.c4-10,.c5-11,.c6-12,
		.c1-8,.c2-9,.c3-10,.c4-11,.c5-12,
		.c1-9,.c2-10,.c3-11,.c4-12,
		.c1-10,.c2-11,.c3-12,
		.c1-11,.c2-12,
		.c1-12	{
			display: inline; /* IE6/IE7 double-margin float bug fix */
			float: left;
			margin-left: map-get($_map, col-margins);
			/* Prevent collapsing of empty columns. Min-height prevents collapse
			everywhere but IE6. IE6 doesn't collapse empty collumns anyhow, so no need
			for a fix there. */
			min-height: 1px;
			clear: none;
		}
		/* 	1/12 */
		.c1,.c2,.c3,.c4,.c5,.c6,.c7,.c8,.c9,.c10,.c11,.c12 { @include cg-cols-width(map-get($_map, column-width), map-get($_map, col-margins)); }
		.offset1 { @include cg-offset(map-get($_map, column-width), map-get($_map, col-margins)); }
		[class*=c1-],
		[class*=c2-],
		[class*=c3-],
		[class*=c4-],
		[class*=c5-],
		[class*=c6-],
		[class*=c7-],
		[class*=c8-],
		[class*=c9-],
		[class*=c10-],
		[class*=c11-],
		[class*=c12-] {
			.offset1:first-child {
				@include cg-offset(map-get($_map, column-width), map-get($_map, col-margins), 1, true);
			}
		}
		/* 	2/12 */
		.c1-2,.c2-3,.c3-4,.c4-5,.c5-6,.c6-7,.c7-8,.c8-9,.c9-10,.c10-11,.c11-12 { @include cg-cols-width(map-get($_map, column-width), map-get($_map, col-margins), 2); }
		.offset2 { @include cg-offset(map-get($_map, column-width), map-get($_map, col-margins), 2); }
		/* 	3/12 */
		.c1-3,.c2-4,.c3-5,.c4-6,.c5-7,.c6-8,.c7-9,.c8-10,.c9-11,.c10-12 { @include cg-cols-width(map-get($_map, column-width), map-get($_map, col-margins), 3); }
		.offset3 { @include cg-offset(map-get($_map, column-width), map-get($_map, col-margins), 3); }
		/* 	4/12 */
		.c1-4,.c2-5,.c3-6,.c4-7,.c5-8,.c6-9,.c7-10,.c8-11,.c9-12 { @include cg-cols-width(map-get($_map, column-width), map-get($_map, col-margins), 4); }
		.offset4 { @include cg-offset(map-get($_map, column-width), map-get($_map, col-margins), 4); }
		/* 	5/12 */
		.c1-5,.c2-6,.c3-7,.c4-8,.c5-9,.c6-10,.c7-11,.c8-12 { @include cg-cols-width(map-get($_map, column-width), map-get($_map, col-margins), 5); }
		.offset5 { @include cg-offset(map-get($_map, column-width), map-get($_map, col-margins), 5); }
		/* 	6/12 */
		.c1-6,.c2-7,.c3-8,.c4-9,.c5-10,.c6-11,.c7-12 { @include cg-cols-width(map-get($_map, column-width), map-get($_map, col-margins), 6); }
		.offset6 { @include cg-offset(map-get($_map, column-width), map-get($_map, col-margins), 6); }
		/* 	7/12 */
		.c1-7,.c2-8,.c3-9,.c4-10,.c5-11,.c6-12 { @include cg-cols-width(map-get($_map, column-width), map-get($_map, col-margins), 7); }
		.offset7 { @include cg-offset(map-get($_map, column-width), map-get($_map, col-margins), 7); }
		/* 	8/12 */
		.c1-8,.c2-9,.c3-10,.c4-11,.c5-12 { @include cg-cols-width(map-get($_map, column-width), map-get($_map, col-margins), 8); }
		.offset8 { @include cg-offset(map-get($_map, column-width), map-get($_map, col-margins), 8); }
		/* 	9/12 */
		.c1-9,.c2-10,.c3-11,.c4-12 { @include cg-cols-width(map-get($_map, column-width), map-get($_map, col-margins), 9); }
		.offset9 { @include cg-offset(map-get($_map, column-width), map-get($_map, col-margins), 9); }
		/* 	10/12 */
		.c1-10,.c2-11,.c3-12 { @include cg-cols-width(map-get($_map, column-width), map-get($_map, col-margins), 10); }
		.offset10 { @include cg-offset(map-get($_map, column-width), map-get($_map, col-margins), 10); }
		/* 	11/12 */
		.c1-11,.c2-12 { @include cg-cols-width(map-get($_map, column-width), map-get($_map, col-margins), 11); }
		.offset11 { @include cg-offset(map-get($_map, column-width), map-get($_map, col-margins), 11); }
		/* 	12/12 */
		.c1-12 { @include cg-cols-width(map-get($_map, column-width), map-get($_map, col-margins), 12); }

		/* 	Accounts for extra margin on first column
			This value should change a negative margin of whatever your gutter width is. */
		.row {
			@include cg-row(map-get($_map, col-margins));
		}
		// --- (end non-'xs' code generation)
	}
} // ends _cg-generate-for-size()


/* 	Default Grid
	Uses $cg-default-size-prefix and sets the defaults for browsers that don't support media queries. */
@include _cg-generate-for-size($cg-default-size-prefix);


/* 	Small Sized Grid
	Tablet sized columns. */
@media only screen and #{$cg-sm-mq} {
	// Only need generate this output if small wasn't the default.
	@if $cg-default-size-prefix != 'sm' {
		@include _cg-generate-for-size('sm');
	}
}

/* 	Medium Sized Grid
	Desktop sized columns. */
@media only screen and #{$cg-md-mq} {
	// Only need generate this output if medium wasn't the default.
	@if $cg-default-size-prefix != 'md' {
		@include _cg-generate-for-size('md');
	}
}

/* 	Large Desktop Grid
	Very wide columns for large monitors. */
@if $cg-use-lg-breakpoint {
	@media only screen and #{$cg-lg-mq} {
		// Only need generate this output if large wasn't the default.
		@if $cg-default-size-prefix != 'lg' {
			@include _cg-generate-for-size('lg');
		}
	}
}

/* 	Single-column mobile
	Get rid of widths and floats, go to fluid single column. */
@media only screen and #{$cg-xs-mq} {
	// Only need generate this output if xs wasn't the default.
	@if $cg-default-size-prefix != 'xs' {
		@include _cg-generate-for-size('xs');
	}
}

/* Zeroing out leftmost nested .unit margins */
[class*=c1] [class*=c1],
[class*=c2] [class*=c2],
[class*=c3] [class*=c3],
[class*=c4] [class*=c4],
[class*=c5] [class*=c5],
[class*=c6] [class*=c6],
[class*=c7] [class*=c7],
[class*=c8] [class*=c8],
[class*=c9] [class*=c9],
[class*=c10] [class*=c10],
[class*=c11] [class*=c11],
[class*=c12] [class*=c12],
[class*=c1-] .offset1:first-child,
[class*=c2-] .offset1:first-child,
[class*=c3-] .offset1:first-child,
[class*=c4-] .offset1:first-child,
[class*=c5-] .offset1:first-child,
[class*=c6-] .offset1:first-child,
[class*=c7-] .offset1:first-child,
[class*=c8-] .offset1:first-child,
[class*=c9-] .offset1:first-child,
[class*=c10-] .offset1:first-child,
[class*=c11-] .offset1:first-child,
[class*=c12-] .offset1:first-child,
.row .row {
	margin-left: 0;
}

/* Full-width  */
.c1-12 {
	clear: both;
	display: block;
	min-height: 1px;
}

/** grid utilities
 -------------------------------------------------- */
/* Row offsetfix
Uses variation of Nicolas Gallagher's Micro offsetfix.
http://nicolasgallagher.com/micro-offsetfix-hack/ */
.row:before,
.row:after {
	content:"";
	display:table;
}
.row:after {
	clear:both;
}
.row {
	/* Just in case: make sure that rows offset outside floats. */
	clear: both;
	/* For IE 6/7 (trigger hasLayout) */
	zoom:1;
}
